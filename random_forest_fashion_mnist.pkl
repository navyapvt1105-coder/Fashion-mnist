{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Navya Varma  \n",
        "**Branch:** Artificial Intelligence and Machine Learning  \n",
        "**Department:** IT Department  \n",
        "**Roll Number:** 03901192022  \n",
        "**Subject:** Recent Trends in AI  \n",
        "\n",
        "---\n",
        "\n",
        "This notebook contains all the code implementations related to the assignments on the Fashion MNIST dataset. It encompasses model training, evaluation, and prediction tasks. At the end of this notebook, you will find a detailed description of both Task 1 and Task 2 along with the results obtained and their interpretations."
      ],
      "metadata": {
        "id": "5Opdv1esmY54"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow import keras\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import accuracy_score, precision_score, roc_auc_score, classification_report\n",
        "from sklearn.preprocessing import StandardScaler, label_binarize\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.pipeline import Pipeline\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Load Fashion MNIST dataset from keras.datasets\n",
        "fashion_mnist = keras.datasets.fashion_mnist\n",
        "(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()\n",
        "\n",
        "# Normalize images: pixel values from [0,255] to [0,1]\n",
        "X_train = X_train / 255.0\n",
        "X_test = X_test / 255.0\n",
        "\n",
        "# Flatten images from 28x28 to 784 for classic ML models\n",
        "X_train_flat = X_train.reshape(-1, 28*28)\n",
        "X_test_flat = X_test.reshape(-1, 28*28)\n",
        "\n",
        "# Class names for labels\n",
        "class_names = ['T-shirt/top','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']\n",
        "\n",
        "# Visualize one sample image\n",
        "plt.imshow(X_train[10], cmap='binary')\n",
        "plt.axis('off')\n",
        "plt.title(f\"Label: {class_names[y_train[10]]}\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "L33rGGItfSyA",
        "outputId": "f8851e63-68e2-4750-cfdf-f5049b7cecd5"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate_model(model, X_test, y_test, model_name):\n",
        "    y_pred = model.predict(X_test)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    precision = precision_score(y_test, y_pred, average='macro')\n",
        "\n",
        "    # Binarize labels for multi-class AUC\n",
        "    y_test_bin = label_binarize(y_test, classes=np.arange(10))\n",
        "    try:\n",
        "        if hasattr(model, \"predict_proba\"):\n",
        "            y_proba = model.predict_proba(X_test)\n",
        "            auc = roc_auc_score(y_test_bin, y_proba, average='macro', multi_class='ovr')\n",
        "        elif hasattr(model, \"decision_function\"):\n",
        "            y_scores = model.decision_function(X_test)\n",
        "            auc = roc_auc_score(y_test_bin, y_scores, average='macro', multi_class='ovr')\n",
        "        else:\n",
        "            auc = None\n",
        "    except:\n",
        "        auc = None\n",
        "\n",
        "    print(f\"--- {model_name} Evaluation ---\")\n",
        "    print(f\"Accuracy: {accuracy:.4f}\")\n",
        "    print(f\"Precision (macro-average): {precision:.4f}\")\n",
        "    if auc is not None:\n",
        "        print(f\"AUC (macro, OvR): {auc:.4f}\")\n",
        "    else:\n",
        "        print(\"AUC metric not available for this model.\")\n",
        "    print()\n",
        "    print(classification_report(y_test, y_pred, target_names=class_names))\n",
        "    print(\"-\"*60)\n",
        "    return accuracy, precision, auc"
      ],
      "metadata": {
        "id": "5F64Z3lmfTU7"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_lr = Pipeline([\n",
        "    ('scaler', StandardScaler()),\n",
        "    ('lr', LogisticRegression(max_iter=500, solver='lbfgs', random_state=42))\n",
        "])\n",
        "\n",
        "param_grid_lr = {'lr__C': [0.01, 0.1, 1, 10]}\n",
        "grid_lr = GridSearchCV(pipeline_lr, param_grid_lr, cv=3, scoring='accuracy', n_jobs=-1)\n",
        "grid_lr.fit(X_train_flat, y_train)\n",
        "\n",
        "best_lr = grid_lr.best_estimator_\n",
        "print(f\"Best Logistic Regression C: {grid_lr.best_params_['lr__C']}\")\n",
        "evaluate_model(best_lr, X_test_flat, y_test, \"Logistic Regression\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "fbLHRzbtfe3H",
        "outputId": "303bd7d0-642f-4381-d510-d67e1db2468c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Logistic Regression C: 0.01\n",
            "--- Logistic Regression Evaluation ---\n",
            "Accuracy: 0.8469\n",
            "Precision (macro-average): 0.8457\n",
            "AUC (macro, OvR): 0.9837\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            " T-shirt/top       0.81      0.81      0.81      1000\n",
            "     Trouser       0.98      0.96      0.97      1000\n",
            "    Pullover       0.73      0.74      0.74      1000\n",
            "       Dress       0.83      0.88      0.85      1000\n",
            "        Coat       0.73      0.77      0.75      1000\n",
            "      Sandal       0.95      0.92      0.94      1000\n",
            "       Shirt       0.63      0.57      0.60      1000\n",
            "     Sneaker       0.91      0.94      0.92      1000\n",
            "         Bag       0.94      0.94      0.94      1000\n",
            "  Ankle boot       0.95      0.94      0.94      1000\n",
            "\n",
            "    accuracy                           0.85     10000\n",
            "   macro avg       0.85      0.85      0.85     10000\n",
            "weighted avg       0.85      0.85      0.85     10000\n",
            "\n",
            "------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.8469, 0.8457486950931103, np.float64(0.983737))"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_small = X_train_flat[:10000]\n",
        "y_train_small = y_train[:10000]\n",
        "\n",
        "pipeline_svm = Pipeline([\n",
        "    ('scaler', StandardScaler()),\n",
        "    ('svm', SVC(probability=True, random_state=42))\n",
        "])\n",
        "\n",
        "param_grid_svm = {\n",
        "    'svm__C': [1, 10],             # Reduced search space for speed\n",
        "    'svm__gamma': ['scale']\n",
        "}\n",
        "\n",
        "grid_svm = GridSearchCV(pipeline_svm, param_grid_svm, cv=3, scoring='accuracy', n_jobs=-1)\n",
        "grid_svm.fit(X_train_small, y_train_small)\n",
        "\n",
        "best_svm = grid_svm.best_estimator_\n",
        "print(f\"Best SVM parameters: {grid_svm.best_params_}\")\n",
        "evaluate_model(best_svm, X_test_flat, y_test, \"SVM (RBF Kernel, 10k training samples)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "T6OM3YO_gLfy",
        "outputId": "0870bbd9-52db-4d7b-a78f-3fb42d5dfddf"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best SVM parameters: {'svm__C': 10, 'svm__gamma': 'scale'}\n",
            "--- SVM (RBF Kernel, 10k training samples) Evaluation ---\n",
            "Accuracy: 0.8637\n",
            "Precision (macro-average): 0.8638\n",
            "AUC (macro, OvR): 0.9881\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            " T-shirt/top       0.82      0.80      0.81      1000\n",
            "     Trouser       0.99      0.96      0.97      1000\n",
            "    Pullover       0.75      0.79      0.77      1000\n",
            "       Dress       0.86      0.86      0.86      1000\n",
            "        Coat       0.78      0.78      0.78      1000\n",
            "      Sandal       0.96      0.94      0.95      1000\n",
            "       Shirt       0.66      0.64      0.65      1000\n",
            "     Sneaker       0.93      0.95      0.94      1000\n",
            "         Bag       0.94      0.97      0.95      1000\n",
            "  Ankle boot       0.95      0.95      0.95      1000\n",
            "\n",
            "    accuracy                           0.86     10000\n",
            "   macro avg       0.86      0.86      0.86     10000\n",
            "weighted avg       0.86      0.86      0.86     10000\n",
            "\n",
            "------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.8637, 0.8637864123323278, np.float64(0.9880658222222223))"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train_flat, y_train)\n",
        "evaluate_model(rf, X_test_flat, y_test, \"Random Forest\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "5FSZoGe5gRCw",
        "outputId": "3d847356-1ec0-49fa-f306-c82d680a91ea"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Random Forest Evaluation ---\n",
            "Accuracy: 0.8764\n",
            "Precision (macro-average): 0.8753\n",
            "AUC (macro, OvR): 0.9893\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            " T-shirt/top       0.82      0.86      0.84      1000\n",
            "     Trouser       0.99      0.96      0.98      1000\n",
            "    Pullover       0.77      0.81      0.79      1000\n",
            "       Dress       0.88      0.90      0.89      1000\n",
            "        Coat       0.77      0.82      0.79      1000\n",
            "      Sandal       0.98      0.96      0.97      1000\n",
            "       Shirt       0.71      0.58      0.64      1000\n",
            "     Sneaker       0.93      0.95      0.94      1000\n",
            "         Bag       0.96      0.97      0.97      1000\n",
            "  Ankle boot       0.95      0.94      0.95      1000\n",
            "\n",
            "    accuracy                           0.88     10000\n",
            "   macro avg       0.88      0.88      0.87     10000\n",
            "weighted avg       0.88      0.88      0.87     10000\n",
            "\n",
            "------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.8764, 0.8753090725828571, np.float64(0.9893433388888889))"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=5)\n",
        "knn.fit(X_train_flat, y_train)\n",
        "evaluate_model(knn, X_test_flat, y_test, \"K-Nearest Neighbors\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "pDG_Vzv9gT8P",
        "outputId": "81da0294-20cf-4966-e886-3ce7f418430a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- K-Nearest Neighbors Evaluation ---\n",
            "Accuracy: 0.8554\n",
            "Precision (macro-average): 0.8578\n",
            "AUC (macro, OvR): 0.9685\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            " T-shirt/top       0.77      0.85      0.81      1000\n",
            "     Trouser       0.99      0.97      0.98      1000\n",
            "    Pullover       0.73      0.82      0.77      1000\n",
            "       Dress       0.90      0.86      0.88      1000\n",
            "        Coat       0.79      0.77      0.78      1000\n",
            "      Sandal       0.99      0.82      0.90      1000\n",
            "       Shirt       0.66      0.57      0.61      1000\n",
            "     Sneaker       0.88      0.96      0.92      1000\n",
            "         Bag       0.97      0.95      0.96      1000\n",
            "  Ankle boot       0.90      0.97      0.93      1000\n",
            "\n",
            "    accuracy                           0.86     10000\n",
            "   macro avg       0.86      0.86      0.85     10000\n",
            "weighted avg       0.86      0.86      0.85     10000\n",
            "\n",
            "------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.8554, 0.8578152450755354, np.float64(0.9685085111111112))"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gnb = GaussianNB()\n",
        "gnb.fit(X_train_flat, y_train)\n",
        "evaluate_model(gnb, X_test_flat, y_test, \"Gaussian Naive Bayes\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "1aI9hZP5gWHD",
        "outputId": "7e846bc7-2757-4c21-f8b9-4d89c2f4d92d"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Gaussian Naive Bayes Evaluation ---\n",
            "Accuracy: 0.5856\n",
            "Precision (macro-average): 0.6361\n",
            "AUC (macro, OvR): 0.8953\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            " T-shirt/top       0.81      0.59      0.68      1000\n",
            "     Trouser       0.64      0.94      0.76      1000\n",
            "    Pullover       0.59      0.32      0.42      1000\n",
            "       Dress       0.44      0.55      0.49      1000\n",
            "        Coat       0.38      0.78      0.51      1000\n",
            "      Sandal       0.93      0.28      0.43      1000\n",
            "       Shirt       0.32      0.04      0.07      1000\n",
            "     Sneaker       0.51      0.99      0.67      1000\n",
            "         Bag       0.83      0.71      0.77      1000\n",
            "  Ankle boot       0.91      0.67      0.77      1000\n",
            "\n",
            "    accuracy                           0.59     10000\n",
            "   macro avg       0.64      0.59      0.56     10000\n",
            "weighted avg       0.64      0.59      0.56     10000\n",
            "\n",
            "------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.5856, 0.6361313853747838, np.float64(0.8953453888888887))"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "\n",
        "# Save the trained Random Forest model to a file\n",
        "joblib.dump(rf, 'random_forest_fashion_mnist.pkl')\n",
        "print(\"Random Forest model saved successfully.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9P9-cim9gdcY",
        "outputId": "a9e8ea28-ea91-47e6-90cf-c0297a9262f4"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest model saved successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load model from file (use this when reloading in a new session)\n",
        "rf_loaded = joblib.load('random_forest_fashion_mnist.pkl')\n",
        "print(\"Random Forest model loaded successfully.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wOvG5gOAlmjl",
        "outputId": "27738887-3a60-4fdd-a507-9acb18a28d9e"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest model loaded successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from PIL import Image\n",
        "from google.colab import files\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Upload image files from your local machine\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Preprocess function: grayscale, resize to 28x28, normalize, flatten\n",
        "def preprocess_image(img_path):\n",
        "    img = Image.open(img_path).convert('L')  # Convert to grayscale\n",
        "    img = img.resize((28, 28))               # Resize to 28x28\n",
        "    img_array = np.array(img) / 255.0         # Normalize pixel values\n",
        "    return img_array.flatten()\n",
        "\n",
        "# List of uploaded file names\n",
        "image_files = list(uploaded.keys())\n",
        "\n",
        "# Preprocess all uploaded images\n",
        "my_images_processed = np.array([preprocess_image(f) for f in image_files])\n",
        "\n",
        "# Visualize uploaded images side by side\n",
        "plt.figure(figsize=(15, 3))\n",
        "for i, img_flat in enumerate(my_images_processed):\n",
        "    plt.subplot(1, len(my_images_processed), i + 1)\n",
        "    plt.imshow(img_flat.reshape(28, 28), cmap='binary')\n",
        "    plt.axis('off')\n",
        "    plt.title(image_files[i])\n",
        "plt.show()\n",
        "\n",
        "# Predict labels using loaded Random Forest model\n",
        "predictions = rf_loaded.predict(my_images_processed)\n",
        "\n",
        "# Class names as before\n",
        "class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n",
        "               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
        "\n",
        "# Print predictions\n",
        "for i, pred in enumerate(predictions):\n",
        "    print(f\"Image '{image_files[i]}' predicted as: {class_names[pred]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "ENKiLKkKlw05",
        "outputId": "99f4d447-86cd-42ef-d202-134b5e4e7323"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-96e910ac-4b5a-4e74-a34a-45fab76272fe\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-96e910ac-4b5a-4e74-a34a-45fab76272fe\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving ChrisCrossRoyalblueCottontshirtmen.webp to ChrisCrossRoyalblueCottontshirtmen (1).webp\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Image 'ChrisCrossRoyalblueCottontshirtmen (1).webp' predicted as: Shirt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Task 1: Training and Evaluating Supervised Learning Models on Fashion MNIST\n",
        "\n",
        "### Objective\n",
        "\n",
        "The goal of this task was to train multiple supervised learning models to classify images from the popular Fashion MNIST dataset. The dataset consists of 70,000 grayscale images of 28x28 pixels representing 10 different categories of fashion items such as T-shirt/top, sneaker, dress, coat, etc.\n",
        "\n",
        "### Dataset Description\n",
        "\n",
        "- **Training set:** 60,000 images\n",
        "- **Test set:** 10,000 images\n",
        "- **Image size:** 28x28 pixels\n",
        "- **Classes:** 10 categories indexed from 0 to 9\n",
        "\n",
        "Each image was normalized by scaling pixel values to the 0 to 1 range before training.\n",
        "\n",
        "### Models Trained\n",
        "\n",
        "We trained and evaluated the following classic supervised classification models with the training set and measured their performance on the test set:\n",
        "\n",
        "1. **Logistic Regression (with hyperparameter tuning of C)**\n",
        "2. **Support Vector Machine (SVM) with RBF kernel (with hyperparameter tuning of C and gamma)**\n",
        "3. **Random Forest Classifier**\n",
        "4. **K-Nearest Neighbors (KNN)**\n",
        "5. **Gaussian Naive Bayes**\n",
        "\n",
        "### Evaluation Metrics\n",
        "\n",
        "To thoroughly evaluate model performance, the following metrics were used:\n",
        "\n",
        "- **Accuracy:** The fraction of total correct predictions.\n",
        "- **Precision (macro-average):** Average precision across all classes, reflecting the quality of positive predictions.\n",
        "- **AUC (Area Under the Curve) (macro-average, One-vs-Rest):** Measures the ability of the model to distinguish between classes.\n",
        "- **Classification Report:** Includes precision, recall, f1-score for each class to understand per-class performance.\n",
        "\n",
        "### Results Summary\n",
        "\n",
        "| Model                 | Accuracy | Precision (Macro) | AUC (Macro, OvR) | Notes                                                             |\n",
        "|-----------------------|----------|-------------------|------------------|-------------------------------------------------------------------|\n",
        "| Logistic Regression    | 84.69%   | 84.57%            | 0.9837           | Good baseline, slightly less accurate than nonlinear models       |\n",
        "| SVM (RBF Kernel)      | 86.37%   | 86.38%            | 0.9881           | Strong performance with tuned parameters                          |\n",
        "| Random Forest         | 87.64%   | 87.53%            | 0.9893           | Best overall performance, robust on diverse classes               |\n",
        "| K-Nearest Neighbors   | 85.54%   | 85.78%            | 0.9685           | Competitive but slightly behind RF and SVM                        |\n",
        "| Gaussian Naive Bayes  | 58.56%   | 63.61%            | 0.8953           | Poor performance due to independence assumptions failure          |\n",
        "\n",
        "### Interpretation\n",
        "\n",
        "- **Random Forest** outperformed other models with the highest accuracy and AUC scores, suggesting its effectiveness in capturing complex pixel feature interactions.\n",
        "- **SVM** achieved close results with good nonlinear decision boundaries.\n",
        "- **Logistic Regression** remains a strong linear baseline.\n",
        "- **KNN** provided competitive results but is computationally more expensive.\n",
        "- **Naive Bayes** performed worst, indicating its naive independence assumption is not suitable for image pixel data.\n",
        "\n",
        "Some classes, like “Shirt,” consistently had lower precision and recall, suggesting challenging visual similarity with other categories.\n",
        "\n",
        "---\n",
        "\n",
        "## Task 2: Predicting Own Fashion Pieces Using the Best Model\n",
        "\n",
        "### Objective\n",
        "\n",
        "Using the best-performing model from Task 1 (Random Forest), we predicted the categories of custom, user-uploaded fashion images.\n",
        "\n",
        "### Image Preprocessing\n",
        "\n",
        "- Uploaded images were converted to grayscale.\n",
        "- Resized to 28x28 pixels to match training data dimensions.\n",
        "- Pixel values normalized to the [0,1] range.\n",
        "- Images flattened to 784-length vectors for the Random Forest input.\n",
        "\n",
        "### Prediction and Visualization\n",
        "\n",
        "- Uploaded images were displayed side by side for manual inspection.\n",
        "- The trained Random Forest model predicted the category of each image.\n",
        "- Example: The model correctly identified “T-shirt/top” category from the user images.\n",
        "\n",
        "### Summary\n",
        "\n",
        "This task demonstrated that the Random Forest model trained on Fashion MNIST generalizes well to new, real-world images following proper preprocessing. Prediction accuracy on custom images depends on image quality and similarity to training data.\n",
        "\n",
        "---\n",
        "\n",
        "## Final Notes\n",
        "\n",
        "- Random Forest is recommended for practical use due to its superior performance.\n",
        "- Preprocessing steps are critical to ensure compatibility of new images with the trained model.\n",
        "- Further improvement could be achieved using deep learning models like CNNs tailored to image data.\n"
      ],
      "metadata": {
        "id": "Wgtd9K1OmTVB"
      }
    }
  ]
}
